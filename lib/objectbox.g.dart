// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'repositories/models/export_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 1158189165769834426),
      name: 'ExportModel',
      lastPropertyId: const IdUid(15, 5129661837763168870),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6616921901556242794),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8459608525427621483),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4081898774315540589),
            name: 'price',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3044788973723212845),
            name: 'sqlId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5344117861139040687),
            name: 'prName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1848794007116139654),
            name: 'barcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 9124144911839678659),
            name: 'tradeName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2795314372542156106),
            name: 'dosage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5142866480521967384),
            name: 'form',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3874734624262645383),
            name: 'inStock',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1606402437119218527),
            name: 'expiredDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5129661837763168870),
            name: 'serie',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 1158189165769834426),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [7302673943746905878],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        152034730033908838,
        1178086196361620664,
        57010673786661741,
        3220674291492108959,
        3753970853878763447
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ExportModel: EntityDefinition<ExportModel>(
        model: _entities[0],
        toOneRelations: (ExportModel object) => [],
        toManyRelations: (ExportModel object) => {},
        getId: (ExportModel object) => object.id,
        setId: (ExportModel object, int id) {
          object.id = id;
        },
        objectToFB: (ExportModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final priceOffset = fbb.writeString(object.price);
          final sqlIdOffset = fbb.writeString(object.sqlId);
          final prNameOffset = fbb.writeString(object.prName);
          final barcodeOffset = fbb.writeString(object.barcode);
          final tradeNameOffset = fbb.writeString(object.tradeName);
          final dosageOffset = fbb.writeString(object.dosage);
          final formOffset = fbb.writeString(object.form);
          final inStockOffset = fbb.writeString(object.inStock);
          final expiredDateOffset = fbb.writeString(object.expiredDate);
          final serieOffset = fbb.writeString(object.serie);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(3, priceOffset);
          fbb.addOffset(6, sqlIdOffset);
          fbb.addOffset(7, prNameOffset);
          fbb.addOffset(8, barcodeOffset);
          fbb.addOffset(9, tradeNameOffset);
          fbb.addOffset(10, dosageOffset);
          fbb.addOffset(11, formOffset);
          fbb.addOffset(12, inStockOffset);
          fbb.addOffset(13, expiredDateOffset);
          fbb.addOffset(14, serieOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ExportModel(
              sqlId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              prName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              barcode: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              tradeName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              dosage: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, ''),
              form: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, ''),
              price:
                  const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 10, ''),
              inStock: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
              expiredDate: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              serie: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ExportModel] entity fields to define ObjectBox queries.
class ExportModel_ {
  /// see [ExportModel.id]
  static final id =
      QueryIntegerProperty<ExportModel>(_entities[0].properties[0]);

  /// see [ExportModel.name]
  static final name =
      QueryStringProperty<ExportModel>(_entities[0].properties[1]);

  /// see [ExportModel.price]
  static final price =
      QueryStringProperty<ExportModel>(_entities[0].properties[2]);

  /// see [ExportModel.sqlId]
  static final sqlId =
      QueryStringProperty<ExportModel>(_entities[0].properties[3]);

  /// see [ExportModel.prName]
  static final prName =
      QueryStringProperty<ExportModel>(_entities[0].properties[4]);

  /// see [ExportModel.barcode]
  static final barcode =
      QueryStringProperty<ExportModel>(_entities[0].properties[5]);

  /// see [ExportModel.tradeName]
  static final tradeName =
      QueryStringProperty<ExportModel>(_entities[0].properties[6]);

  /// see [ExportModel.dosage]
  static final dosage =
      QueryStringProperty<ExportModel>(_entities[0].properties[7]);

  /// see [ExportModel.form]
  static final form =
      QueryStringProperty<ExportModel>(_entities[0].properties[8]);

  /// see [ExportModel.inStock]
  static final inStock =
      QueryStringProperty<ExportModel>(_entities[0].properties[9]);

  /// see [ExportModel.expiredDate]
  static final expiredDate =
      QueryStringProperty<ExportModel>(_entities[0].properties[10]);

  /// see [ExportModel.serie]
  static final serie =
      QueryStringProperty<ExportModel>(_entities[0].properties[11]);
}
